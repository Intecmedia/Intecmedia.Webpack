/* eslint-env node */
/* eslint "compat/compat": "off", "max-classes-per-file": "off" */

const assert = require('assert');

const pluginName = 'JsonpScriptSrcPlugin';
/**
 * This plugin modifies the webpack bootstrap code generated by the plugin at
 * webpack/lib/web/JsonpMainTemplatePlugin.js
 *
 * It will rename the function jsonpScriptSrc generated by that to webpackJsonpScriptSrc
 * and install a new version that check a user provided function for a custom src.
 *
 *   window.__webpack_get_script_src__(chunkId, publicPath, originalSrc, options)
 *
 * This is only for webpack 4
 *
 * Webpack 5 has official support for this https://github.com/webpack/webpack/pull/8462
 * so it won't be necessary.
 */
class JsonpScriptSrcPlugin {
    constructor(userOptions = {}) {
        this.pluginName = pluginName;

        const defaultOptions = {
            assertIncludes: false,
            callbackFn: '__webpack_get_script_src__',
        };

        this.options = { ...defaultOptions, ...userOptions };
    }

    applyMainTemplate(mainTemplate) {
        // use stage 1 to ensure this executes after webpack/lib/web/JsonpMainTemplatePlugin.js
        mainTemplate.hooks.localVars.tap({ name: pluginName, stage: 1 }, (source) => {
            if (this.options.assertIncludes) {
                assert(
                    source.includes('function jsonpScriptSrc'),
                    "JsonpScriptSrcPlugin: main template bootstrap source doesn't have function jsonpScriptSrc",
                );
            }
            return [
                source.replace('function jsonpScriptSrc', 'function webpackJsonpScriptSrc'),
                `var userGetScriptSrc = window[${JSON.stringify(this.options.callbackFn)}];`,
                'var currentScriptParts = (document.currentScript && document.currentScript.src ? document.currentScript.src.split("?", 2) : []);',
                'var currentScriptSrc = (currentScriptParts[0] ? currentScriptParts[0] : "");',
                'var currentScriptSuffix = (currentScriptParts[1] ? currentScriptParts[1] : "");',
                'var currentScriptBrotli = (currentScriptSrc && currentScriptSrc.endsWith ? currentScriptSrc.endsWith(".br") : false);',
                'function jsonpScriptSrc(chunkId) {',
                '    var src = webpackJsonpScriptSrc(chunkId);',
                `    return (userGetScriptSrc && userGetScriptSrc(chunkId, ${mainTemplate.requireFn}.p, src, {brotli: currentScriptBrotli, suffix: currentScriptSuffix}))`,
                '        || (currentScriptBrotli ? src + ".br" : src) + (currentScriptParts[1] ? "?" + currentScriptParts[1] : "");',
                '};',
            ].join('\n');
        });
    }

    apply(compiler) {
        compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
            this.applyMainTemplate(compilation.mainTemplate);
        });
    }
}
module.exports = JsonpScriptSrcPlugin;
