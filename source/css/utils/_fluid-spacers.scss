@use "sass:math";

$fluid-spacers: (
    "3xs": 0.25,
    "2xs": 0.5,
    "xs": 0.75,
    "s": 1,
    "m": 1.5,
    "l": 2,
    "xl": 3,
    "2xl": 4,
    "3xl": 6,
) !default;

$fluid-spacers-pairs: (
    "3xs": "2xs",
    "2xs": "xs",
    "xs": "s",
    "s": "m",
    "m": "l",
    "l": "xl",
    "xl": "2xl",
    "2xl": "3xl",
) !default;

$fluid-spacers-min-width: 375px !default;
$fluid-spacers-min-size: 16px !default;

$fluid-spacers-max-width: 1920px !default;
$fluid-spacers-max-size: 20px !default;

@mixin fluid-spacers(
    $spacers: $fluid-spacers,
    $spacers-pairs: $fluid-spacers-pairs,
    $min-width: $fluid-spacers-min-width,
    $min-size: $fluid-spacers-min-size,
    $max-width: $fluid-spacers-max-width,
    $max-size: $fluid-spacers-max-size
) {
    @each $key, $scale in $spacers {
        $min: $min-size * $scale;
        $max: $max-size * $scale;
        /* Spacer: #{$key}: #{to-fixed($min, 2)} -> #{to-fixed($max, 2)} (x#{$scale}) */
        @include fluid-clamp-prop(--fluid-spacer-#{$key}, rem($min), rem($max), $min-width, $max-width);
    }

    @each $key1, $key2 in $spacers-pairs {
        @if not map-has-key($spacers, $key1) {
            @error "Cant find #{$key1} key in spacers.";
        }
        @if not map-has-key($spacers, $key2) {
            @error "Cant find #{$key2} key in spacers.";
        }

        $scale1: map-get($spacers, $key1);
        $scale2: map-get($spacers, $key2);
        $min-scale: math.min($scale1, $scale2);
        $max-scale: math.max($scale1, $scale2);

        $min: $min-size * $min-scale;
        $max: $max-size * $max-scale;
        $key: "#{$key1}-#{$key2}";
        /* Spacer: #{$key}: #{to-fixed($min, 2)} -> #{to-fixed($max, 2)} (x#{$min-scale} -> x#{$max-scale}) */
        @include fluid-clamp-prop(--fluid-spacer-#{$key}, rem($min), rem($max), $min-width, $max-width);
    }
}

@function fluid-spacers-min(
    $name,
    $spacers: $fluid-spacers,
    $spacers-pairs: $fluid-spacers-pairs,
    $min-width: $fluid-spacers-min-width,
    $min-size: $fluid-spacers-min-size,
    $max-width: $fluid-spacers-max-width,
    $max-size: $fluid-spacers-max-size
) {
    @if map-has-key($spacers, $name) {
        $scale: map-get($spacers, $name);
        $min: $min-size * $scale;

        @return $min;
    }

    $sep-index: str-index($name, "-");

    @if $sep-index {
        @if not map-has-key($spacers-pairs, $name) {
            @error "Cant find #{$name} key in spacers.";
        }

        $key1: str-slice($name, 1, $sep-index - 1);
        $key2: str-slice($name, $sep-index + 1);

        @if not map-has-key($spacers, $key1) {
            @error "Cant find #{$key1} key in spacers.";
        }
        @if not map-has-key($spacers, $key2) {
            @error "Cant find #{$key2} key in spacers.";
        }

        $scale1: map-get($spacers, $key1);
        $scale2: map-get($spacers, $key2);
        $min-scale: math.min($scale1, $scale2);
        $min: $min-size * $min-scale;

        @return $min;
    }

    @error "Cant find #{$name} key in spacers.";
}

@function fluid-spacers-max(
    $name,
    $spacers: $fluid-spacers,
    $spacers-pairs: $fluid-spacers-pairs,
    $min-width: $fluid-spacers-min-width,
    $min-size: $fluid-spacers-min-size,
    $max-width: $fluid-spacers-max-width,
    $max-size: $fluid-spacers-max-size
) {
    @if map-has-key($spacers, $name) {
        $scale: map-get($spacers, $name);
        $max: $max-size * $scale;

        @return $max;
    }

    $sep-index: str-index($name, "-");

    @if $sep-index {
        @if not map-has-key($spacers-pairs, $name) {
            @error "Cant find #{$name} key in spacers.";
        }

        $key1: str-slice($name, 1, $sep-index - 1);
        $key2: str-slice($name, $sep-index + 1);

        @if not map-has-key($spacers, $key1) {
            @error "Cant find #{$key1} key in spacers.";
        }
        @if not map-has-key($spacers, $key2) {
            @error "Cant find #{$key2} key in spacers.";
        }

        $scale1: map-get($spacers, $key1);
        $scale2: map-get($spacers, $key2);
        $max-scale: math.max($scale1, $scale2);
        $max: $max-size * $max-scale;

        @return $max;
    }

    @error "Cant find #{$name} key in spacers.";
}
