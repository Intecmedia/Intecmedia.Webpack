//
// Html root and html body
//
@use "sass:map";
/* stylelint-disable no-duplicate-selectors -- already in 'node_modules/bootstrap/scss/reboot.scss', but we need it */

:root {
    --NODE_ENV: "#{$NODE_ENV}";
    --DEBUG: "#{$DEBUG}";
    --PACKAGE_NAME: "#{$PACKAGE_NAME}";

    // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/
    --viewport-height: calc(var(--vh, 1vh) * 100);
    --viewport-dynamic-height: calc(var(--dvh, 1vh) * 100);
    --viewport-small-height: calc(var(--svh, 1vh) * 100);
    --viewport-large-height: calc(var(--lvh, 1vh) * 100);

    --section-height: 100vh;

    @each $name, $width in $grid-breakpoints {
        --breakpoint-#{$name}: #{$width};
    }

    @include fluid-steps(
        $negative-count: $fluid-steps-negative-count,
        $positive-count: $fluid-steps-positive-count,
        $min-width: $fluid-steps-min-width,
        $min-size: $fluid-steps-min-size,
        $min-scale: $fluid-steps-min-scale,
        $max-width: $fluid-steps-max-width,
        $max-size: $fluid-steps-max-size,
        $max-scale: $fluid-steps-max-scale
    );
    @include fluid-spacers(
        $spacers: $fluid-spacers,
        $spacers-pairs: $fluid-spacers-pairs,
        $min-width: $fluid-spacers-min-width,
        $min-size: $fluid-spacers-min-size,
        $max-width: $fluid-spacers-max-width,
        $max-size: $fluid-spacers-max-size
    );
    @include fluid-clamp-prop(
        $prop: --fluid-gutter,
        $min-size: remify($fluid-gutter-min-size),
        $max-size: remify($fluid-gutter-max-size),
        $min-width: $fluid-gutter-min-width,
        $max-width: $fluid-gutter-max-width
    );

    @include vertical-breakpoint-down(sm) {
        --section-height: #{map.get($vertical-breakpoints, "sm")};
    }

    @include media-breakpoint-down(ss) {
        /* stylelint-disable-next-line declaration-property-unit-allowed-list -- for root allowed only px */
        font-size: 14px;
    }
    @include media-breakpoint-up(hd) {
        $root-font-size-clamp: fluid-clamp($font-size-rem, $font-size-qhd-rem, "hd", "qhd");

        @supports (font-size: $root-font-size-clamp) {
            /* stylelint-disable-next-line plugin/no-unsupported-browser-features -- not standart feature */
            font-size: $root-font-size-clamp;
        }
    }
}

/* stylelint-disable-next-line plugin/no-unsupported-browser-features -- not standart feature */
@supports (height: 100dvh) and (height: 100svh) and (height: 100lvh) {
    :root {
        /* stylelint-disable-next-line plugin/no-unsupported-browser-features -- not standart feature */
        --viewport-dynamic-height: 100dvh !important;
        /* stylelint-disable-next-line plugin/no-unsupported-browser-features -- not standart feature */
        --viewport-small-height: 100svh !important;
        /* stylelint-disable-next-line plugin/no-unsupported-browser-features -- not standart feature */
        --viewport-large-height: 100lvh !important;
    }
}

html {
    background: var(--#{$prefix}body-bg, #{$body-bg});
}

body {
    --#{$prefix}letter-spacing: #{$letter-spacing};

    min-height: 100vh;

    letter-spacing: var(--#{$prefix}letter-spacing, #{$letter-spacing});

    overflow: auto scroll;
    text-rendering: optimizespeed;

    @if $NODE_ENV != "production" or $DEBUG {
        &::after {
            @include debug-body("NODE_ENV=#{$NODE_ENV} DEBUG=#{$DEBUG}");
        }
    }
}

/* stylelint-enable no-duplicate-selectors */
