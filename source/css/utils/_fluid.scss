@use "sass:math";
@use "sass:meta";

$fluid-min-width: 375px !default;
$fluid-max-width: 1920px !default;

$fluid-min-height: 375px !default;
$fluid-max-height: 992px !default;

$fluid-fixed-digits: 4 !default;

@function fluid-invalidate-units($a, $b) {
    @if not unitless($a) and (unit($a) != unit($b) or not comparable($a, $b)) {
        @return true;
    }

    @return false;
}

@mixin fluid-property(
    $properties,
    $min-value,
    $max-value,
    $min-width: $fluid-min-width,
    $max-width: $fluid-max-width,
    $min-width-calc: $min-width,
    $max-width-calc: $max-width
) {
    @if meta.type-of($min-width) == "string" {
        $min-width: map-get($grid-breakpoints, $min-width);
    }
    @if meta.type-of($max-width) == "string" {
        $max-width: map-get($grid-breakpoints, $max-width);
    }
    @if meta.type-of($min-width-calc) == "string" {
        $min-width-calc: map-get($grid-breakpoints, $min-width-calc);
    }
    @if meta.type-of($max-width-calc) == "string" {
        $max-width-calc: map-get($grid-breakpoints, $max-width-calc);
    }

    @each $property in $properties {
        #{$property}: $min-value;
    }

    @if fluid-invalidate-units($min-value, $min-width-calc) {
        @error "Cant calc $min-value=#{$min-value} and $min-width-calc=#{$min-width-calc} with different units.";
    }

    @if fluid-invalidate-units($max-value, $max-width-calc) {
        @error "Cant calc $max-value=#{$max-value} and $max-width-calc=#{$max-width-calc} with different units.";
    }

    $value-calc: strip-unit($max-value - $min-value);
    $width-calc: strip-unit($max-width-calc - $min-width-calc);

    @media (min-width: $min-width) {
        @each $property in $properties {
            #{$property}: calc(#{$min-value} + #{$value-calc} * (100vw - #{$min-width-calc}) / #{$width-calc});
        }
    }

    @media (min-width: $max-width) {
        @each $property in $properties {
            #{$property}: $max-value;
        }
    }
}

@mixin fluid-property-vertical(
    $properties,
    $min-value,
    $max-value,
    $min-height: $fluid-min-height,
    $max-height: $fluid-max-height,
    $min-height-calc: $min-height,
    $max-height-calc: $max-height
) {
    @if meta.type-of($min-height) == "string" {
        $min-height: map-get($vertical-breakpoints, $min-height);
    }
    @if meta.type-of($max-height) == "string" {
        $max-height: map-get($vertical-breakpoints, $max-height);
    }
    @if meta.type-of($min-height-calc) == "string" {
        $min-height-calc: map-get($vertical-breakpoints, $min-height-calc);
    }
    @if meta.type-of($max-height-calc) == "string" {
        $max-height-calc: map-get($vertical-breakpoints, $max-height-calc);
    }

    @each $property in $properties {
        #{$property}: $min-value;
    }

    @if fluid-invalidate-units($min-value, $min-height-calc) {
        @error "Cant calc $min-value=#{$min-value} and $min-height-calc=#{$min-height-calc} with different units.";
    }

    @if fluid-invalidate-units($max-value, $max-height-calc) {
        @error "Cant calc $max-value=#{$max-value} and $max-height-calc=#{$max-height-calc} with different units.";
    }

    $value-calc: strip-unit($max-value - $min-value);
    $height-calc: strip-unit($max-height-calc - $min-height-calc);

    @media (min-height: $min-height) {
        @each $property in $properties {
            #{$property}: calc(#{$min-value} + #{$value-calc} * (100vh - #{$min-height-calc}) / #{$height-calc});
        }
    }

    @media (min-height: $max-height) {
        @each $property in $properties {
            #{$property}: $max-value;
        }
    }
}

@mixin fluid-font-size(
    $min-value,
    $max-value,
    $min-width: $fluid-min-width,
    $max-width: $fluid-max-width,
    $min-width-calc: $min-width,
    $max-width-calc: $max-width
) {
    $prop: font-size;

    @if meta.type-of($min-width) == "string" {
        $min-width: map-get($grid-breakpoints, $min-width);
    }
    @if meta.type-of($max-width) == "string" {
        $max-width: map-get($grid-breakpoints, $max-width);
    }
    @if meta.type-of($min-width-calc) == "string" {
        $min-width-calc: map-get($grid-breakpoints, $min-width-calc);
    }
    @if meta.type-of($max-width-calc) == "string" {
        $max-width-calc: map-get($grid-breakpoints, $max-width-calc);
    }

    @include fluid-property($prop, $min-value, $max-value, $min-width, $max-width, $min-width-calc, $max-width-calc);
}

@mixin fluid-font-size-rem(
    $min-value,
    $max-value,
    $min-width: $fluid-min-width,
    $max-width: $fluid-max-width,
    $min-width-calc: $min-width,
    $max-width-calc: $max-width
) {
    $prop: font-size;

    @if meta.type-of($min-width) == "string" {
        $min-width: map-get($grid-breakpoints, $min-width);
    }
    @if meta.type-of($max-width) == "string" {
        $max-width: map-get($grid-breakpoints, $max-width);
    }
    @if meta.type-of($min-width-calc) == "string" {
        $min-width-calc: map-get($grid-breakpoints, $min-width-calc);
    }
    @if meta.type-of($max-width-calc) == "string" {
        $max-width-calc: map-get($grid-breakpoints, $max-width-calc);
    }

    @include fluid-property(
        $prop,
        rem($min-value),
        rem($max-value),
        $min-width,
        $max-width,
        rem($min-width-calc),
        rem($max-width-calc)
    );
}

@mixin fluid-font-size-vertical(
    $min-value,
    $max-value,
    $min-height: $fluid-min-height,
    $max-height: $fluid-max-height,
    $min-height-calc: $min-height,
    $max-height-calc: $max-height
) {
    $prop: font-size;

    @if meta.type-of($min-height) == "string" {
        $min-height: map-get($vertical-breakpoints, $min-height);
    }
    @if meta.type-of($max-height) == "string" {
        $max-height: map-get($vertical-breakpoints, $max-height);
    }
    @if meta.type-of($min-height-calc) == "string" {
        $min-height-calc: map-get($vertical-breakpoints, $min-height-calc);
    }
    @if meta.type-of($max-height-calc) == "string" {
        $max-height-calc: map-get($vertical-breakpoints, $max-height-calc);
    }

    @include fluid-property-vertical(
        $prop,
        $min-value,
        $max-value,
        $min-height,
        $max-height,
        $min-height-calc,
        $max-height-calc
    );
}

@mixin fluid-font-size-vertical-rem(
    $min-value,
    $max-value,
    $min-height: $fluid-min-height,
    $max-height: $fluid-max-height,
    $min-height-calc: $min-height,
    $max-height-calc: $max-height
) {
    $prop: font-size;

    @if meta.type-of($min-height) == "string" {
        $min-height: map-get($vertical-breakpoints, $min-height);
    }
    @if meta.type-of($max-height) == "string" {
        $max-height: map-get($vertical-breakpoints, $max-height);
    }
    @if meta.type-of($min-height-calc) == "string" {
        $min-height-calc: map-get($vertical-breakpoints, $min-height-calc);
    }
    @if meta.type-of($max-height-calc) == "string" {
        $max-height-calc: map-get($vertical-breakpoints, $max-height-calc);
    }

    @include fluid-property-vertical(
        $prop,
        rem($min-value),
        rem($max-value),
        $min-height,
        $max-height,
        rem($min-height-calc),
        rem($max-height-calc)
    );
}

@function fluid-clamp-base($min-size, $max-size, $min-clamp, $max-clamp, $vertical: false) {
    @if meta.type-of($min-clamp) == "string" {
        @if ($vertical) {
            $min-clamp: map-get($vertical-breakpoints, $min-clamp);
        } @else {
            $min-clamp: map-get($grid-breakpoints, $min-clamp);
        }
    }
    @if meta.type-of($max-clamp) == "string" {
        @if ($vertical) {
            $max-clamp: map-get($vertical-breakpoints, $max-clamp);
        } @else {
            $max-clamp: map-get($grid-breakpoints, $max-clamp);
        }
    }

    $min-unit: unit($min-size);

    @if $min-unit != px and $min-unit != rem {
        @error "$min-size #{$min-size} must be either px or rem (now is #{$min-unit}).";
    }
    $min-size: rem($min-size);
    $min-size: strip-unit($min-size);

    $max-unit: unit($max-size);

    @if $max-unit != px and $max-unit != rem {
        @error "$max-size #{$max-size} must be either px or rem (now is #{$max-unit}).";
    }
    $max-size: rem($max-size);
    $max-size: strip-unit($max-size);

    @if unit($max-clamp) != px {
        @error "$max-clamp #{$max-clamp} must be px (now is #{unit($min-clamp)}).";
    }
    $min-clamp: strip-unit($min-clamp);

    @if unit($max-clamp) != px {
        @error "$max-clamp #{$max-clamp} must be px (now is #{unit($max-clamp)}).";
    }
    $max-clamp: strip-unit($max-clamp);

    $sub-size: ($max-size - $min-size);
    $sub-clamp: ($max-clamp - $min-clamp);

    $vp-value: math.div(16 * 100 * $sub-size, $sub-clamp);
    $vp-value: to-fixed($vp-value, $fluid-fixed-digits);

    $value: $min-size - math.div($min-clamp * $sub-size, $sub-clamp);
    $value: to-fixed($value, $fluid-fixed-digits);

    $sign: "";

    @if ($value >= 0) {
        $sign: "+";
    } @else {
        $sign: "-";
    }

    $abs-value: abs($value);

    $vp-unit: "";

    @if ($vertical) {
        $vp-unit: "vh";
    } @else {
        $vp-unit: "vw";
    }

    @if $min-unit == rem and $max-unit == rem {
        $min-size: to-fixed($min-size, $fluid-fixed-digits);
        $abs-value: to-fixed($abs-value, $fluid-fixed-digits);
        $max-size: to-fixed($max-size, $fluid-fixed-digits);

        $clamp-min: math.min($min-size, $max-size);
        $clamp-max: math.max($min-size, $max-size);

        @return clamp(#{$clamp-min}rem, #{$abs-value}rem #{$sign} #{$vp-value}#{$vp-unit}, #{$clamp-max}rem);
    }

    @if $min-unit == px and $max-unit == px {
        $min-size: to-fixed($min-size * 16, $fluid-fixed-digits);
        $abs-value: to-fixed($abs-value * 16, $fluid-fixed-digits);
        $max-size: to-fixed($max-size * 16, $fluid-fixed-digits);

        $clamp-min: math.min($min-size, $max-size);
        $clamp-max: math.max($min-size, $max-size);

        @return clamp(#{$clamp-min}px, #{$abs-value}px #{$sign} #{$vp-value}#{$vp-unit}, #{$clamp-max}px);
    }

    @error "Cant calc $min-size=#{$min-size} and $max-size=#{$max-size} with different units.";
}

@function fluid-clamp($min-size, $max-size, $min-width: $fluid-min-width, $max-width: $fluid-max-width) {
    @if meta.type-of($min-width) == "string" {
        $min-width: map-get($grid-breakpoints, $min-width);
    }
    @if meta.type-of($max-width) == "string" {
        $max-width: map-get($grid-breakpoints, $max-width);
    }

    @return fluid-clamp-base($min-size, $max-size, $min-width, $max-width, false);
}

@function fluid-clamp-vertical($min-size, $max-size, $min-height: $fluid-min-height, $max-height: $fluid-max-height) {
    @if meta.type-of($min-height) == "string" {
        $min-height: map-get($vertical-breakpoints, $min-height);
    }
    @if meta.type-of($max-height) == "string" {
        $max-height: map-get($vertical-breakpoints, $max-height);
    }

    @return fluid-clamp-base($min-size, $max-size, $min-height, $max-height, true);
}

@mixin fluid-clamp-prop($prop, $min-size, $max-size, $min-width: $fluid-min-width, $max-width: $fluid-max-width) {
    $clamp-size: fluid-clamp($min-size, $max-size, $min-width, $max-width);

    #{$prop}: to-fixed($min-size, $fluid-fixed-digits);

    @supports (#{$prop}: $clamp-size) {
        /* stylelint-disable-next-line plugin/no-unsupported-browser-features, csstree/validator -- not standart feature */
        #{$prop}: $clamp-size;
    }
}

@mixin fluid-clamp-font-size($min-size, $max-size, $min-width: $fluid-min-width, $max-width: $fluid-max-width) {
    @include fluid-clamp-prop(font-size, $min-size, $max-size, $min-width, $max-width);
}

@mixin fluid-clamp-prop-vertical(
    $prop,
    $min-size,
    $max-size,
    $min-height: $fluid-min-height,
    $max-height: $fluid-max-height
) {
    $clamp-size: fluid-clamp-vertical($min-size, $max-size, $min-height, $max-height);

    #{$prop}: to-fixed($min-size, $fluid-fixed-digits);

    @supports (#{$prop}: $clamp-size) {
        /* stylelint-disable-next-line plugin/no-unsupported-browser-features, csstree/validator -- not standart feature */
        #{$prop}: $clamp-size;
    }
}

@mixin fluid-clamp-font-size-vertical(
    $min-size,
    $max-size,
    $min-height: $fluid-min-height,
    $max-height: $fluid-max-height
) {
    $prop: font-size;

    @include fluid-clamp-prop-vertical($prop, $min-size, $max-size, $min-height, $max-height);
}
