//
// Common mixins and functions.
//

@use "sass:math";
@use "sass:meta";
@use "sass:string";

// Repeat a string.
@function str-repeat($str, $n) {
    $result: "";

    @for $i from 1 through $n {
        $result: $result + $str;
    }

    @return $result;
}

// Strip unit.
@function strip-unit($number) {
    @if meta.type-of($number) == "number" and not math.is-unitless($number) {
        @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}

// Exponential expression.
@function pow($x, $n) {
    $ret: 1;

    @if $n >= 0 {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        }
    } @else {
        @for $i from $n to 0 {
            $ret: math.div($ret, $x);
        }
    }

    @return $ret;
}

// Formats number using fixed-point notation.
@function to-fixed($float, $digits: 6) {
    $pow: pow(10, $digits);

    @return math.div(math.round($float * $pow), $pow);
}

// Replace all occurrences of the search string with the replacement string.
@function str-replace($string, $search, $replace: "") {
    $index: string.index($string, $search);

    @if $index {
        $result: string.slice($string, 1, $index - 1) + $replace;
        $result: $result + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);

        @return $result;
    }

    @return $string;
}

// Rounds number.
@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;

    // $number must be a number
    @if meta.type-of($number) != number {
        @warn '#{ $number } is not a number.';

        @return $number;
    }

    // $digits must be a unitless number
    @if meta.type-of($digits) != number {
        @warn '#{ $digits } is not a number.';

        @return $number;
    } @else if not math.is-unitless($digits) {
        @warn '#{ $digits } has a unit.';

        @return $number;
    }

    @if $digits > 0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }
    @if $mode == round {
        @return math.div(math.round($number * $n), $n);
    } @else if $mode == ceil {
        @return math.div(math.ceil($number * $n), $n);
    } @else if $mode == floor {
        @return math.div(math.floor($number * $n), $n);
    } @else {
        @warn '#{ $mode } is undefined keyword.';

        @return $number;
    }
}

// Check string starts with.
@function str-starts-with($str, $substring) {
    $index: 1;

    @return string.index($str, $substring) == $index;
}

// Check string ends with.
@function str-ends-with($str, $substring) {
    $index: string.length($str) - string.length($substring) + 1;

    @return string.index($str, $substring) == $index;
}

// Check css-value is `calc()`.
@function type-of-calc($value) {
    @if meta.type-of($value) != "string" {
        @return false;
    }

    @return str-starts-with($value, "calc(") and str-ends-with($value, ")");
}

// Check css-value is `var()`.
@function type-of-var($value) {
    @if meta.type-of($value) != "string" {
        @return false;
    }

    @return str-starts-with($value, "var(") and str-ends-with($value, ")");
}

// Negativify CSS-value.
@function negativify-value($value) {
    @if type-of-calc($value) {
        $result: string.slice($value, string.length("calc("), -1);
        $result: calc(-1 * #{$result});

        @return $result;
    }
    @if type-of-var($value) {
        $result: calc(-1 * #{$value});

        @return $result;
    }

    @return -$value;
}

// Grid percentage e.g: 1 of 12 get 8.3333%.
@function grid-percentage($column, $count) {
    @return math.percentage(math.div($column, $count));
}
