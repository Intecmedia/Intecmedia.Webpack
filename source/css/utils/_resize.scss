/* stylelint-disable plugin/no-unsupported-browser-features -- wrong error */

$resize-breakpoints: $grid-breakpoints !default;

@mixin background-image($url) {
    background-image: url("#{$url}");

    @if $NODE_ENV == "production" or $DEBUG {
        /* postcss.resize.webp: ignore */
        html.webp & {
            background-image: url("#{$url}?resize=x&format=webp");
        }

        /* postcss.resize.avif: ignore */
        html.avif & {
            background-image: url("#{$url}?resize=x&format=avif");
        }
    }
}

@mixin breakpoints-background-image($url, $breakpoints: $resize-breakpoints) {

    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);
        @include media-breakpoint-only($infix) {
            background-image: url("#{$url}?resize=#{$breakpoint}x&format=jpg&suffix=#{$infix}");
        }
    }


    @if $NODE_ENV == "production" or $DEBUG {
        /* postcss.resize.webp: ignore */
        html.webp & {
            @each $breakpoint in map-keys($breakpoints) {
                $infix: breakpoint-infix($breakpoint, $breakpoints);
                @include media-breakpoint-only($infix) {
                    background-image: url("#{$url}?resize=#{$breakpoint}x&format=webp&suffix=#{$infix}");
                }
            }
        }

        /* postcss.resize.avif: ignore */
        html.avif & {
            @each $breakpoint in map-keys($breakpoints) {
                $infix: breakpoint-infix($breakpoint, $breakpoints);
                @include media-breakpoint-only($infix) {
                    background-image: url("#{$url}?resize=#{$breakpoint}x&format=avif&suffix=#{$infix}");
                }
            }
        }
    }
}

/* stylelint-enable plugin/no-unsupported-browser-features */
