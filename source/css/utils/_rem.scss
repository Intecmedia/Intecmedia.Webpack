//
// Rem mixins and functions.
//

@use "sass:math";
@use "sass:meta";
@use "sass:list";

$remify-baseline: 16px !default;
$remify-fallback: false !default;
$remify-px-only: false !default;

// Exctract rem separator from css-value.
@function remify-separator($list, $separator: false) {
    @if $separator == "comma" or $separator == "space" {
        @return list.append($list, null, $separator);
    }

    @return list.separator($list);
}

// Convert css-values to rem or px.
@function remify-convert($to, $values...) {
    $result: ();
    $separator: remify-separator($values);

    @each $value in $values {
        @if meta.type-of($value) == "number" and math.unit($value) == "rem" and $to == "px" {
            $result: list.append($result, math.div($value, 1rem) * $remify-baseline, $separator);
        } @else if meta.type-of($value) == "number" and math.unit($value) == "px" and $to == "rem" {
            $result: list.append($result, math.div($value, $remify-baseline) * 1rem, $separator);
        } @else if meta.type-of($value) == "list" {
            $value-separator: remify-separator($value);
            $value: remify-convert($to, $value...);
            $value: remify-separator($value, $value-separator);
            $result: list.append($result, $value, $separator);
        } @else {
            $result: list.append($result, $value, $separator);
        }
    }

    @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

// Convert single property.
@function remify($values...) {
    @if $remify-px-only {
        @return remify-convert(px, $values...);
    } @else {
        @return remify-convert(rem, $values...);
    }
}

// Convert list of properties.
@mixin remify($properties, $values...) {
    @if meta.type-of($properties) == "map" {
        @each $prop in map.keys($properties) {
            @include remify($prop, map.get($properties, $prop));
        }
    } @else {
        @each $prop in $properties {
            @if $remify-fallback or $remify-px-only {
                #{$prop}: remify-convert(px, $values...);
            }
            @if not $remify-px-only {
                #{$prop}: remify-convert(rem, $values...);
            }
        }
    }
}
