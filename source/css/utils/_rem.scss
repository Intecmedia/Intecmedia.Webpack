//
// Rem mixins and functions.
//

@use "sass:math";
@use "sass:meta";
@use "sass:list";

$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

// Exctract rem separator from css-value.
@function rem-separator($list, $separator: false) {
    @if $separator == "comma" or $separator == "space" {
        @return list.append($list, null, $separator);
    }

    @return list.separator($list);
}

// Get rem baseline.
@mixin rem-baseline($zoom: 100%) {
    /* stylelint-disable-next-line declaration-property-unit-allowed-list -- its wrong case */
    font-size: math.div($zoom, 16px) * $rem-baseline;
}

// Convert css-values to rem or px.
@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);

    @each $value in $values {
        @if meta.type-of($value) == "number" and math.unit($value) == "rem" and $to == "px" {
            $result: list.append($result, math.div($value, 1rem) * $rem-baseline, $separator);
        } @else if meta.type-of($value) == "number" and math.unit($value) == "px" and $to == "rem" {
            $result: list.append($result, math.div($value, $rem-baseline) * 1rem, $separator);
        } @else if meta.type-of($value) == "list" {
            $value-separator: rem-separator($value);
            $value: rem-convert($to, $value...);
            $value: rem-separator($value, $value-separator);
            $result: list.append($result, $value, $separator);
        } @else {
            $result: list.append($result, $value, $separator);
        }
    }

    @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

// Convert single property.
@function rem($values...) {
    @if $rem-px-only {
        @return rem-convert(px, $values...);
    } @else {
        @return rem-convert(rem, $values...);
    }
}

// Convert list of properties.
@mixin rem($properties, $values...) {
    @if meta.type-of($properties) == "map" {
        @each $prop in map.keys($properties) {
            @include rem($prop, map.get($properties, $prop));
        }
    } @else {
        @each $prop in $properties {
            @if $rem-fallback or $rem-px-only {
                #{$prop}: rem-convert(px, $values...);
            }
            @if not $rem-px-only {
                #{$prop}: rem-convert(rem, $values...);
            }
        }
    }
}
