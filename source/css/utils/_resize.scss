/* stylelint-disable plugin/no-unsupported-browser-features -- wrong error */

$resize-breakpoints: $grid-breakpoints !default;

@function resize-prefix($name, $breakpoints: $resize-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", $name);
}

@mixin background-image($url) {
    background-image: url("#{$url}");

    /* postcss.resize.webp: ignore */

    /* postcss.resize.avif: ignore */

    @if $NODE_ENV == "production" or $DEBUG {
        @if $APP-WEBP {
            html.webp & {
                /* postcss.resize.webp: ignore */
                background-image: url("#{$url}?resize=x&format=webp");
            }
        }

        @if $APP-AVIF {
            html.avif & {
                /* postcss.resize.avif: ignore */
                background-image: url("#{$url}?resize=x&format=avif");
            }
        }
    }
}

@mixin breakpoints-background-image($url, $breakpoints: $resize-breakpoints) {
    /* postcss.resize.webp: ignore */

    /* postcss.resize.avif: ignore */

    @each $breakpoint in map-keys($breakpoints) {
        $size: strip-unit(map-get($breakpoints, $breakpoint));
        $prefix: resize-prefix($breakpoint, $breakpoints);

        @include media-breakpoint-only($prefix) {
            /* postcss.resize.webp: ignore */

            /* postcss.resize.avif: ignore */

            background-image: url("#{$url}?resize=#{$size}x&suffix=#{$prefix}");
        }
    }

    @if $NODE_ENV == "production" or $DEBUG {
        @if $APP-WEBP {
            html.webp & {
                @each $breakpoint in map-keys($breakpoints) {
                    $size: strip-unit(map-get($breakpoints, $breakpoint));
                    $prefix: resize-prefix($breakpoint, $breakpoints);

                    @include media-breakpoint-only($prefix) {
                        /* postcss.resize.webp: ignore */
                        background-image: url("#{$url}?resize=#{$size}x&format=webp&suffix=#{$prefix}");
                    }
                }
            }
        }

        @if $APP-AVIF {
            html.avif & {
                @each $breakpoint in map-keys($breakpoints) {
                    $size: strip-unit(map-get($breakpoints, $breakpoint));
                    $prefix: resize-prefix($breakpoint, $breakpoints);

                    @include media-breakpoint-only($prefix) {
                        /* postcss.resize.avif: ignore */
                        background-image: url("#{$url}?resize=#{$size}x&format=avif&suffix=#{$prefix}");
                    }
                }
            }
        }
    }
}

/* stylelint-enable plugin/no-unsupported-browser-features */
